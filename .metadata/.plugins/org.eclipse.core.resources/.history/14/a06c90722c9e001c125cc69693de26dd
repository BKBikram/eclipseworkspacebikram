package com.user.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.user.dto.UserDto;
import com.user.entity.User;
import com.user.exception.ResourceNotFoundException;
import com.user.repository.UserRepository;

@Service
public class UserServiceImpl implements UserService {
	@Autowired
	private UserRepository repo;

	@Override
	public UserDto getById(long id) {
		UserDto dto = null;
		try {
			Optional<User> user = repo.findById(id);
			if (user.isPresent()) {
				User entity = user.get();
				dto = new UserDto();
				dto.setId(entity.getId());
				dto.setFirstName(entity.getFirstName());
				dto.setLastName(entity.getLastName());
				dto.setEmail(entity.getEmail());
				dto.setAge(entity.getAge());	
			}
			
			
		} catch (Exception e) {
			
		}
		return dto;
		
	}

	@Override
	public List<UserDto> getAllUsers() 
	{
		List<UserDto> responseDto = new ArrayList<UserDto>();
	 try {
		    List<User> users = repo.findAll();
			for (User user : users) {
				UserDto dto = new UserDto();
				dto.setId(user.getId());
				dto.setFirstName(user.getFirstName());
				dto.setLastName(user.getLastName());
				dto.setEmail(user.getEmail());
				dto.setAge(user.getAge());
				responseDto.add(dto);
			}
		} 
	 catch (Exception e) 
	    {
		 
	    }
		return responseDto;
	}

	@Override
	public String addNewUser(UserDto userdto) {
	try {
		User user=new User();
		user.setFirstName(userdto.getFirstName());
		user.setLastName(userdto.getLastName());
		user.setEmail(userdto.getEmail());
		user.setAge(userdto.getAge());
		repo.save(user);
		return "new user added successfully";
	   }
	
	catch(Exception e) {	
		return "some internal problem occure";
	  }
	}

	@Override
	public String updateUserById(Long id, @Valid UserDto dto) {
		try {
		Optional<User> user=repo.findById(id);
		if(user.isPresent())
		{
			User updateduser=user.get();
			updateduser.setFirstName(dto.getFirstName());
			updateduser.setLastName(dto.getLastName());
			updateduser.setEmail(dto.getEmail());
			updateduser.setAge(dto.getAge());
			repo.save(updateduser);
	        return "user updated Successfully";
		}
		return "couldn't updated the user";
		}
		catch(Exception e) {
			return "internal server issue";
		}
		
	}

	@Override
	public String deleteUserById(Long id) {
		repo.deleteById(id);
		return "user deleted successfully";
		
	}

	@Override
	public List<UserDto> findUserByLastName(String lastname) {
		
		List<UserDto> userdto=new ArrayList<UserDto>();
	try {
		List<User> entity=repo.findByLastName(lastname);
		for(User list:entity)
		{
			UserDto dto=new UserDto();
			dto.setId(list.getId());
			dto.setFirstName(list.getFirstName());
			dto.setLastName(list.getLastName());
			dto.setEmail(list.getEmail());
			dto.setAge(list.getAge());
			userdto.add(dto);
		}
	}
	catch(Exception e) {
		
	}
	return userdto;
		
	}

	@Override
	public List<UserDto> findByUserAge(Long age) {
	List<UserDto> responselist=new ArrayList<UserDto>();
	try {
	List<User> user=repo.findByAge(age);
	for(User list:user) {
		UserDto dto=new UserDto();
		dto.setFirstName(list.getFirstName());
		dto.setLastName(list.getLastName());
		dto.setEmail(list.getEmail());
		dto.setId(list.getId());
		dto.setAge(list.getAge());
		responselist.add(dto);
		}
	}
	catch(Exception e) {
		
	}
	return responselist;
	}

	@Override
	public List<UserDto> findByFirstNameAndLastName(String firstname, String lastname) {
		List<UserDto> responselist=new ArrayList<UserDto>();
	try {
		List<User> user=repo.findByFirstNameAndLastName(firstname, lastname);
		for(User list:user) {
			UserDto dto=new UserDto();
			dto.setFirstName(list.getFirstName());
			dto.setLastName(list.getLastName());
			dto.setEmail(list.getEmail());
			dto.setId(list.getId());
			dto.setAge(list.getAge());
			responselist.add(dto);
		}
	}
	catch(Exception e) {
		
	}
		
		return responselist;
	}

	@Override
	public List<UserDto> findUserByAgeLessThan(Long age) {
		List<UserDto> responseList=new ArrayList<UserDto>();
	try {
		List<User> user=repo.findByAgeLessThanEqual(age);
		for(User list:user) {
			UserDto dto=new UserDto();
			dto.setFirstName(list.getFirstName());
			dto.setLastName(list.getLastName());
			dto.setEmail(list.getEmail());
			dto.setId(list.getId());
			dto.setAge(list.getAge());
			responseList.add(dto);
		}
	}
	catch(Exception e) {
		
	}
		return responseList;
	}

	@Override
	public List<UserDto> findUseByAgeGreaterThanEqual(Long age) {
		List<UserDto> responseList=new ArrayList<UserDto>();
	try {
		List<User> user=repo.findByAgeGreaterThanEqual(age);
				for(User list:user) {
			UserDto dto=new UserDto();
			dto.setFirstName(list.getFirstName());
			dto.setLastName(list.getLastName());
			dto.setEmail(list.getEmail());
			dto.setId(list.getId());
			dto.setAge(list.getAge());
			responseList.add(dto);
		}
	}
	catch(Exception e) {
		
	}
		return responseList;
	}

	@Override
	public List<UserDto> findUserByAge(Long age) {
		List<UserDto> responselist=new ArrayList<UserDto>();
		try {
		List<User> user=repo.findUserByAge(age);
		for(User list:user) {
			UserDto dto=new UserDto();
			dto.setFirstName(list.getFirstName());
			dto.setLastName(list.getLastName());
			dto.setEmail(list.getEmail());
			dto.setId(list.getId());
			dto.setAge(list.getAge());
			responselist.add(dto);
			}
		}
		catch(Exception e) {
			
		}
		return responselist;
		}

	@Override
	public List<UserDto> findUserByAgeOrFirstname(Long age, String firstname) {
		List<UserDto> responselist=new ArrayList<UserDto>();
		try {
		List<User> user=repo.findUserByAgeOrFirstName(age, firstname);
		for(User list:user) {
			UserDto dto=new UserDto();
			dto.setFirstName(list.getFirstName());
			dto.setLastName(list.getLastName());
			dto.setEmail(list.getEmail());
			dto.setId(list.getId());
			dto.setAge(list.getAge());
			responselist.add(dto);
			}
		}
		catch(Exception e) {
			
		}
		return responselist;
	}

	@Override
	public List<UserDto> findAll() {
		List<User> users=repo.findAllUsers();
		List<UserDto> responseList=new ArrayList<UserDto>();
		for(User list:users) {
			UserDto dto=new UserDto();
			dto.setFirstName(list.getFirstName());
			dto.setLastName(list.getLastName());
			dto.setEmail(list.getEmail());
			dto.setId(list.getId());
			dto.setAge(list.getAge());
			responseList.add(dto);
		}
		return responseList;
	}

	@Override
	public List<UserDto> findUserOrderBy() {
		List<User> user=repo.findUserOrderBy();
		List<UserDto> responseList=new ArrayList<UserDto>();
		for(User list:user) {
			UserDto dto=new UserDto();
			dto.setFirstName(list.getFirstName());
			dto.setLastName(list.getLastName());
			dto.setEmail(list.getEmail());
			dto.setId(list.getId());
			dto.setAge(list.getAge());
			responseList.add(dto);
			
		}
		return responseList;
	}

	@Override
	public List<UserDto> findByFirstname(String firstname) {
		
		List<UserDto> responseList=new ArrayList<UserDto>();
	try {
		List<User> user=repo.findUserByFirstName(firstname);
		for(User list:user) {
			UserDto dto=new UserDto();
			dto.setFirstName(list.getFirstName());
			dto.setLastName(list.getLastName());
			dto.setEmail(list.getEmail());
			dto.setId(list.getId());
			dto.setAge(list.getAge());
			responseList.add(dto);
		}
	}catch(Exception e) {
		
	}
		return responseList;
	}
	
	

}
